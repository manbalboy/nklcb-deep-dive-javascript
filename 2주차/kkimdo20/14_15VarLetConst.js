// function foo() {
//     var x = 'local';
//     console.log(x); // local
//     return x;
// }
// foo();
// console.log(x); // ReferenceError

// 지역 변수 x는 foo 함수가 호출되기 이전까지 생성되지 않는다.
// 지역 변수의 생명 주기는 함수의 생명주기와 일치한다.

// var x = 'global';
// function foo() {
//     var x = 'local';
//     console.log(x); // local
// }

// foo();
// console.log(x); // global

// 호이스팅은 스코프를 단위로 동작한다.
// 호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것 처럼 동작하는 자바스크립트 고유의 특징.

// 브라우저 환경에서 전역 객체는 window이므로 전역 객체 window는 웹페이지를 닫기전까지 유효하다.
// 따라서 브라우저 환경에서 var 키워드로 선언한 전역 변수는 웹페이지를 닫을 때 까지 유효하다.
// var 키워드로 선언한 전역변수의 생명 주기는 전역객체의 생명주기와 일치한다.

// 전역 변수의 문제점.

// 암묵적 결합 : 변수의 유효범위가 크면 클수록 코드의 가독성이 나빠지고, 의도치 않게 상태가 변경될수 있는 위험성도 높아진다.

// 긴 생명주기 : 전역변수는 생명주기가 길기 때문에 여러 문제점이 발생한다.

var x = 1;

// ....
// 변수의 중복 선언. 기존 변수에 값을 재할당한다.

var x = 100;
console.log(x); // 100

// 스코프 체인상에서 종점에 존재 : 전역 변수의 검색속도가 가장 느리다.

// 네임 스페이스 오염

// 전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야한다.
// 변수의 스코프는 좁을수록 좋다.

// ES6에서는 새로운 변수 선언 키워드인 let과 const를 도입했다.

var foo = 123;
// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.
var foo = 456;
// 위의 변수 선언문은 자바스크립트 엔진에 의해 var키워드가 없는 것처럼 동작한다.

let bar = 123;
// let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.
let bar = 456; //SyntaxError

// let키워드로 선언한 변수는 모든 코드블록을 지역스코프로 인정하는 블록 레벨 스코프를 따른다.

let foo = 1;// 전역변수
{ 
    let foo = 2;
  let bar = 3;
}

console.log(foo); // 1
console.log(bar); // ReferenceError

// const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 한다.

// const 키워드로 선언한 변수는 재할당이 금지 된다.

// 상수는 재할당이 금지된 변수를 말한다.

// const 키워드로 선언된 변수에 원시값을 할당한 경우 원시 값은 변경할 수 없는 값이고,
// const 키워드에 의해 재할당이 금지되므로 할당된 값을 변경 할 수 있는 방법은 없다.

// 일반적으로 상수의 이름은 대문자로 선언해 상수임을 명확히 나타내고, 여러 단어로 이뤄진 경우에는
// 스네이크 케이스로 표현하는 것이 일반적이다.(언더스코어_ 사용)

// const 키워드로 선언된 변수에 객체를 할당한 경우에는 값을 변경할 수 있다.

const person = {
    name : 'Lee'
};

person.name = 'Kim';

console.log(person); // kim

// 결론
// - ES6를 사용한다면 var 키워드를 사용하지 않는다.(이 시점에 let과 const가 도입됨)
// - 재할당이 필요한 경우에 한정해 let 키워드를 사용한다. 이때 변수의 스코프는 최대한 좁게 만든다.
// - 변경이 발생하지 않고 읽기전용으로 사용하는(재할당이 필요없는 상수) 원시 값과 객체에는 const 키워드를 사용한다.
//   const키워드는 재할당을 금지하므로 var,let키워드 보다 안전하다.
