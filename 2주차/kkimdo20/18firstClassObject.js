// 일급 객체는 다음과 같은 조건을 만족한다.
// 1. 무명의 리터럴로 생성할 수 있다.
// 2. 변수나 자료구조(객체,배열등)에 저장할 수 있다.
// 3. 함수의 매개변수에 전달할 수 있다.
// 4. 함수의 반환값으로 사용할 수 있다.

// 자바스크립트의 함수는 위의 조건을 모두 만족하므로 일급 객체다.

// 하지만 함수는 객체이지만 일반 객체와는 차이가 있다. 호출할 수 있기 때문!
// 그리고 함수 객체에는 일반객체에 없는 함수 고유의 프로퍼티를 소유한다.

// 함수는 객체이기 때문에 프로퍼티를 가질 수 있다.

// 함수 객체의 arguments 프로퍼티 값은 arguments 객체다.
// 현재 일부 브라우저에서 함수객체 arguments 프로퍼티를 일부 지원하고 있지만 ES3부터 표준에서 폐지되었다.
// 따라서 권장되지 않는 사용법이며, 함수 내부에서 지역 변수처럼 사용할수있는 arguments 객체를 참조하도록 한다.

// 자바스크립트 함수의 매개변수와 인수의 개수가 일치하는지 확인하지 않는다.

function multiply(x, y){
    console.log(arguments);
    return x + y;
}

console.log(multiply()); // NaN
console.log(multiply(1)); //NaN
console.log(multiply(1,2)); //2
console.log(multiply(1,2,3)); //2

// (multiply(),multiply(1)) 인수가 전달되지 않은 매개변수는 undefined로 초기화된 상태를 유지한다.
// 매개변수보다 인수를 더많이 전달한 경우 초과된 인수는 무시된다.
// 그렇다고 버려지는 것은 아니고, 객체의 프로퍼티로 보관된다.

// arguemnts 객체는 매개변수 개수를 확정할 수 없는 "가변 인자 함수"를 구현할 때 유용하다.

// 유사 배열 객체와 이터러블
// ES6에서 도입된 이터레이션 프로토콜을 준수하면 순회 가능한 자료구조인 이터러블이 된다.
// 이터러블의 개념이 없었던 ES5에서는 arguments 객체는 유사 배열 객체로 구분되었다.
// Es6 부터는 유사배열이자 이터러블.

// 유사배열은 배열이 아니기 때문에 배열 메서드를 사용할 경우 에러가 발생한다.
// 따라서 Function.prototype.call,Function.prototype.apply를 통해 간접 호출해야하는 번거로움이 있었다.
function sum() {
    // arguments 객체를 배열로 변환
    const array = Array.prototype.slice.call(arguments);
    return array.reduce(function(pre, cur){
        return pre + cur;
    }, 0);
}

console.log(sum(1,2)); // 3
console.log(1,2,3,4,5); // 15

// 이러한 번거로움을 해결하기 위해 ES6부터 Rest 파라미터를 도입했다.

function sum(... args){
    return args.reduce((pre, cur)=> pre+cur,0);
}
console.log(sum(1,2)); // 3
console.log(sum(1,2,3,4,5)); // 15

// Rest 파라미터의 도입으로 모던 자바스크립틍서는 arguments 객체의 중요성이
// 이전 같지는 않지만 언제나 ES6만 사용하지는 않을 수 있기 때문에 알아둘 필요가 있다.

// Caller 프로퍼티는 ECMAScript 사양에 포함되지 않은 비표준 프로퍼티다.
// length 프로퍼티는 함수를 정의 할 때 선언한 매개변수의 개수를 가리킨다.
// name 프로퍼티는 함수 이름을 나타낸다. name 프로퍼티는 ES6이전까지는 비표준이였는데 ES6에서 정식 표준이 되었다.
// 따라서 ES5와 ES6에서 동작을 달리한다. 익명 함수 표현식의 경우는 ES5에서는 빈 문자열을 값으로 갖지만,
// ES6에서는 함수객체를 가리키는 식별자를 값으로 갖는다.
// __proto__ 접근자 프로퍼티
// __proto__프로퍼티는 프로토타입 내부 슬롯이 가리키는 프로토타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티다.
// hasOwnProperty 메서드는, 인수로 전달받은 프로퍼티 키가 객체 고유의 프로퍼티 키인 경우에만
// true를 반환하고 상속받은 프로토타입의 프로퍼티 키인 경우 false를 반환한다.
// prototype 프로퍼티는 생성자 함수로 호출할 수 있는 함수 객체, 즉 constructor만이 소유하는 프로퍼티다.

// 결론
// 자바스크립트의 "함수"는 일급객체의 조건을 모두 만족하므로 일급 객체다. 객체와 동일하게 사용할 수 있다.
// 하지만 차이점이 있다. 일반 객체는 호출할 수 없지만, 함수는 호출할 수 있다.
// argument 프로퍼티는 유사 배열 객체이면서 이터러블이다(ES6), 가변 인자 함수를 구현할 때 유용하며,
// ES6에서는 배열 메서드를 사용하기 위한 번거로움을 해결하기위해 Rest 파라미터를 도입했다.
// name 프로퍼티는 ES5와 ES6에서 동작을 달리한다. ES5에서는 익명함수 표현식의 경우 빈 문자열을 값으로 갖지만,
// ES6에서는 함수 객체를 가리키는 식별자를 값으로 갖는다.
// proto 프로퍼티는 프로토타입 내부 슬롯이 가리키는 객체에 접근하기 위해 사용하는 접근자 프로퍼티.
// hasOwnProperty메서드는 인수로 전달받은 키가 고유의 키인 경우만 true 반환, 상속받았을 경우 false를 반환한다.
// prototype 프로퍼티는 constructor만이 소유하는 프로퍼티이다. 일반객체는 소유하지 않는다.
