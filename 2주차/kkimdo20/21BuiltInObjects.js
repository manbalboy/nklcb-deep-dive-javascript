// 자바스크립트 객체는 다음과 같이 크게 3개의 객체로 분류할 수 있다.

// 표준 빌트인 객체 
// ECMAScript 사양에 정의된 객체를 말하며 애플리케이션 전역의 공통 기능을 제공한다.
// 따라서 별도의 선언없이 전역 변수처럼 언제나 참조할 수 있다.

// 호스트 객체
// 호스트 객체는 ECMAScript 사양에 정의되어 있지는 않지만, 자바스크립트 실행환경에서 추가로 제공하는 객체를 말한다.
// 브라우저 환경에서는 DOM, BOM,Canvas,XMLHttpRequest,fetch,requestAnimationFrame,SVG등
// 같은 클라이언트 사이드 web API를 호스트 객체로 제공하고 Node.js 환경에서는 노드 고유의 API를 호스트 객체로 제공한다.

// 사용자 정의 객체
// 사용자 정의 객체는 표준 빌트인 객체와 호스트 객체처럼 기본 제공되는 객체가 아닌 사용자가 직접 정의한 객체를 말한다.


// 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 래퍼(wrapper) 객체라 한다.

// const str = 'hello';

// // 원시 타입인 문자열이 프로퍼티와 메서드를 갖고있는 객체처럼 동작한다.
// console.log(str.length); // 5
// console.log(str.toUpperCase()); //HELLO

// console.log(typeof str) // string

// 래퍼 객체인 String 인스턴스로 변환되어 프로퍼티에 접근하거나 메서드를 호출한 다음, 다시 원시값으로 돌리는 것.

const str = 'hello'; // 1) 식별자 str은 문자열을 값으로 갖고 있다.

str.name = 'Lee'; // 2) 식별자 str은 암묵적으로 생성된 래퍼 객체를 가리킨다.
                  // str의 값 'hello'는 래퍼 객체의 [[StringData]] 내부 슬롯에 할당된다.
                  // 래퍼 객체에 name 프로퍼티가 동적 추가 된다.
                  
// 3) 식별자 str은 다시 원래의 문자열, 즉 래퍼 객체의 내부 슬롯에 할당된 원시값을 갖는다.
// 이때 2)에서 생성된 래퍼 객체는 가비지 컬렉션의 대상이 된다.

console.log(str.name); // undefined 4) 식별자 str은 새롭게 암묵적으로 생성된(2) 래퍼객체와는 다른) 래퍼 객체를 가리킨다.
                       // 새롭게 생성된 래퍼 객체는 프로퍼티가 존재하지 않는다.
console.log(typeof str, str); // string hello 
// 5) 식별자 str은 다시 원래의 문자열, 즉 래퍼 객체의 [[StringData]] 내부 슬롯에 할당된 원시값을 갖는다.
// 이 때 4)에서 생성된 래퍼 객체는 가비지 컬렉션의 대상이 된다.

// 브라우저 환경
// globalThis === this // true
// globalThis === window // true
// globalThis === self // true
// globalThis === frames // true

// node.js(12.0.0 이상)
// globalThis === this // true
// globalThis === global // true

// globalThis는 브라우저 환경과 Nodejs 환경에서 전역객체를 가리키던 다양한 식별자를 통일한 식별자다.
// ECMAScript 표준사양을 준수하는 모든 환경에서 사용할 수 있다.

// Infinity 프로퍼티는 무한대를 나타내는 숫자값을 갖는다.
// NaN 프로퍼티는 숫자가 아닌 숫자값 NaN을 갖는다. Number.NaN프로퍼티와 같다.
// undefined 프로퍼티는 원시타입 undefined를 값으로 갖는다.

// eval 함수는 자바스크립트 코드를 나타내는 문자열을 인수로 전달받는다.
// eval 함수는 기존의 스코프를 런타임에 동적으로 수정한다.
// eval 함수의 사용은 금지해야한다. (보안에 매우 취약하고, 처리속도가 느리다.)

// "암묵적 전역"은 선언하지 않은 식별자를 전역에서 참조할 수 있게 전역 객체의 프로퍼티가 되어, 전역 변수처럼 동작하게 된다.
// "암묵적 전역"은 변수를 선언하지않고 전역 객체의 프로퍼티로 추가가 되었을 뿐이라, 변수 호이스팅이 발생하지 않는다.

// 결론

// 자바스크립트는 객체를 3가지로 분류한다. 표준 빌트인 객체, 호스트 객체, 사용자 정의 객체.
// 생성자 함수인 표준 빌트인 객체가 생성한 인스턴스의 프로토타입은 표준 빌트인 객체의 prototype 프로퍼티에 바인딩된 객체다.
// 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 "래퍼 객체"라 한다. rap아니고 wrap이다.
// 래퍼 객체의 처리가 종료되면 원시값을 갖도록 되돌리고, 래퍼 객체는 가비지 컬렉션의 대상이 된다.
// 전역 객체는 어떤 객체보다 먼저 생성되는 특수한 객체, 최상위 객체다.
// 빌트인 전역 프로퍼티는 주로 전역 객체의 프로퍼티를 의미한다.
// eval 함수는 쓰지말자(보안에도 취약하고 처리속도도 느리다.)
// 자바스크립트 엔진은 변수의 선언을 찾지 못할 때 전역 객체에 프로퍼티를 동적 생성한다.
// 선언하지않고 값을 준 식별자는 전역 객체의 프로퍼티가 되어 전역 변수처럼 동작한다.
// 이것이 암묵적 전역.