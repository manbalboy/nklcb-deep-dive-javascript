// 4가지 타입의 소스코드는 실행 컨텍스트를 생성한다
// 전역 코드 : 전역에 존재하는 소스코드, 정의된 함수 클래스 등의 내부코드는 포함하지 않음
// 함수 코드 : 함수 내부에 존재하는 소스코드, 함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않음.
// eval 코드 : 빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드.
// 모듈 코드 : 모듈 내부에 존재하는 소스콛. 모듈 내부의 함수, 클래스 등의 내부코드는 포함되지 않음

// 자바스크립트 엔진은 소스코드를 2개의 과정, 평가와 실행으로 나누어 처리한다.

// 코드가 실행되려면 다음과 같이 스코프,식별자,코드 실행 순서등의 관리가 필요하다.
// 1. 선언에 의해 생성된 모든 식별자를 스코프를 구분하여 등록하고 상태변화를 지속적으로 관리할 수 있어야 한다.
// 2. 스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프체인을 통해 상위 스코프로 이동하여 식별자를 검색할 수 있어야 한다.
// 3. 현재 실행중인 코드의 실행 순서를 변경할 수 있어야 하며 다시 되돌아 갈 수도 있어야 한다.

// 실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고, 코드의 실행 결과를 실제로 관리하는 영역이다.
// 식별자,스코프는 렉시컬 환경으로 관리하고 실행 순서는 실행 컨텍스트 스택으로 관리한다.

// 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트.

// 전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있다.

// 전역 환경 레코드를 구성하는 컴포넌트인 객체 환경 레코드는 BindingObject라고 부르는 객체와 연결된다.
// BindingObject는 "전역 객체 생성"에서 생성된 전역 객체다.
// 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 환경 레코드의
// 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.

// 식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색하기 시작한다.

// 자바스크립트는 함수를 어디서 호출했는지가 아니라 어디에 정의햇는지에 따라 상위 스코프를 결정한다고 했다.

// 결론
// 실행 컨텍스트는 자바스크립트의 동작원리를 담고있는 핵심 개념이다.
