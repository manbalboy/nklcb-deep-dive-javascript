// 클래스는 생성자 함수와 매우 유사하게 동작하지만 다음과 같은 몇 가지 차이가 있다.
// 1. 클래스를 new 연산자 없이 호출하면 에러가 발행한다.
// 2. 클래스는 상속을 지원하는 extends와 super 키워드를 제공한다 하지만 생성자 함수는
// extends와 super 키워드를 지원하지 않는다.
// 3. 클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 하지만 함수 선언문으로 정의된 생성자 함수는 함수 호이스팅이
// 함수 표현식으로 정의한 생성자 함수는 변수 호이스팅이 발생한다.
// 4. 클래스 내의 모든 코드에는 암묵적으로 strict mode가 지정되어 실행되며 strict mode를 해제할 수 없다.
// 하지만 생성자 함수는 암묵적으로 strict mode가 지정되지 않는다.
// 5. 클래스의 constructor, 프로토타입 메서드, 정적 메서드는 모두 프로퍼티 어트리뷰트 Enumerable의 값이 false다.
// 다시 말해 열거되지 않는다.

// 클래스는 새로운 객체 생성 메커니즘으로 보는 것이 좀 더 합당하다.

class Person {} // 클래스 선언문

const Person = class{};

const Person = class MyClass {};

// 클래스를 표현식으로 정의할 수 있다는 것은 클래스가 값으로 사용할 수 있는 일급 객체라는 것을 의미한다.

// 무명의 리터럴로 생성할 수 있다. 즉 런타임에 생성 가능
// 변수나 자료구조에 저장할 수 있다.
// 함수의 매개변수에게 전달할 수 있다.
// 함수의 반환값으로 사용할 수 있다.

// 클래스의 constructor 메서드와 프로토타입의 constructor 프로퍼티는 혼동할수 있지만, 직접적인 관련이 없다.
// TC39(Technical Committee) : ECMAScript의 관리를 담당하는 위원회. 구글,애플,마이크로소프트,모질라 등 ECMA-262사양을 제대로 준수해야하는 기업으로 구성되어있다.
// TC39 프로세스는 새로운 표준 사양을 추가하기 위해 공식적으로 명문화해 놓은 과정을 말한다. 프로세스는 총 5개의 단계로 구성되어 있다. 현재 올라와 있는 제안을 확인 하려면
// ECMAScript proposals를 참고하기 바란다.

// 현재(2021.06.09)기준 stage3에 private 필드를 정의할 수 있는 새로운 표준 사양이 제안되어 있다.

class People{
    #name = ''; // private 필드 정의

    constructor(name){
        //private 필드 참조
        this.#name = name;
    }
}

const me = new Person('Lee');

console.log(me.#name); //syntax error


// 타입스크립트라는게 있다. 클래스 기반 객체지향 언어가 지원하는 접근제한자를 모두 지원하며, 의미 또한 기본적으로 동일하다.

// public 필드는 어디서든 참조할 수 있지만 private 필드는 클래스 내부에서만 참조 가능

// static 키워드를 사용하여 필드 메서드를 정의할 수 있는 새로운 표준 사양인 static class features가 stage3에 제안되어 있다.

// 최신 브라우저와 node에 이미 구현되어 있다.

// 상속에 의한 클래스 확장은 기존 클래스를 상속받아 새로운 클래스를 확장하여 정의하는 것.

// ES6의 메서드 축약 표현으로 정의된 함수만이 [[HomeObject]]를 갖는다.

// 서브 클래스는 자신이 직접 인스턴스를 생성하지 않고 수퍼클래스에게 인스턴스 생성을 위임한다. 이것이 바로 서브클래스의 constructor에서 반드시 super를 호출해야 하는 이유.

// 인스턴스는 new.target이 가리키는 서브클래스가 생성한것.

