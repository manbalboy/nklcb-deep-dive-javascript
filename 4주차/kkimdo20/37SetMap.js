// Set 객체는 중복되지 안흔 유일한 값들의 집합. 배열과 유사하지만.

// 동일한 값을 중복하여 포함할 수 없고
// 요소 순서에 의미를 부여하지 않고
// 인덱스로 요소에 접근할 수도 없다.

// set 생성자 함수는 이터러블을 인수로 전달받아 set 객체를 생성한다.

const set1 = new Set([1,2,3,3]);

console.log(set1);

// 이렇게 중복을 허용하지 않는 set 객체의 특성을 활용해 중복된 요소를 제거할 수 있다.

// set1.size 셋의 요소 개수 확인
// set1.add() 셋에 요소 추가.
// set1.clear() 셋 요소 일괄 삭제
// set1.has() 요소 존재여부 확인
// set.forEach(v,v2,v3) 
// v(첫번째인수) : 현재 순회중인 요소값
// v2(두번째 인수) : 현재 순회 요소중인 값
// v3(세번째 인수) : 현재 순회중인 set 객체 자체

// set 객체는 이터러블.

// set로 집합을 표현 가능하다. 교집합 합집합 차집합 부분집합 상위집합.
// 집합이 필요할 때 set를 찾아오자.


// Map 객체는 키와 값의 쌍으로 이루어진 컬렉션이다.
// 객체와 유사하지만 이터러블이며, 요소개수확인을 size로 해야한다는 차이점이 있다.

// Map 생성자 함수는 이터러블을 인수로 전달받아 Map 객체를 생성한다. 이때 인수로 전달되는 이터러블은 키와 값의 쌍으로 이루어진 요소로 구성되어야 한다.

const map1 = new Map([['key1','value1'],['key2','value2']]);

console.log(map1);